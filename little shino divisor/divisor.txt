import java.awt.*;
import java.text.DecimalFormat;
import java.util.*;
import java.io.*;
 
public class TestClass {
 
    static class Parser
    {
        final private int BUFFER_SIZE = 1 << 16;
 
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Parser(InputStream in)
        {
            din = new DataInputStream(in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        public long nextLong() throws Exception
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }
 
        //reads in the next string
        public String next() throws Exception
        {
            StringBuilder ret =  new StringBuilder();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char)c);
                c = read();
            } while (c > ' ');
            return ret.toString();
        }
 
        public int nextInt() throws Exception
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }
 
        private void fillBuffer() throws Exception
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) buffer[0] = -1;
        }
 
        private byte read() throws Exception
        {
            if (bufferPointer == bytesRead) fillBuffer();
            return buffer[bufferPointer++];
        }
    }
    static class OutputWriter
    {
        private PrintWriter writer;
 
        public OutputWriter(OutputStream stream)
        {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
                    stream)));
        }
 
        public OutputWriter(Writer writer)
        {
            this.writer = new PrintWriter(writer);
        }
 
        public void println(int x)
        {
            writer.println(x);
        }
 
        public void print(int x)
        {
            writer.print(x);
        }
 
        public void println(char x)
        {
            writer.println(x);
        }
 
        public void print(char x)
        {
            writer.print(x);
        }
 
        public void println(int array[], int size)
        {
            for (int i = 0; i < size; i++)
                println(array[i]);
        }
 
        public void print(int array[], int size)
        {
            for (int i = 0; i < size; i++)
                print(array[i] + " ");
        }
 
        public void println(long x)
        {
            writer.println(x);
        }
 
        public void print(long x)
        {
            writer.print(x);
        }
 
        public void println(long array[], int size)
        {
            for (int i = 0; i < size; i++)
                println(array[i]);
        }
 
        public void print(long array[], int size)
        {
            for (int i = 0; i < size; i++)
                print(array[i]);
        }
 
        public void println(float num)
        {
            writer.println(num);
        }
 
        public void print(float num)
        {
            writer.print(num);
        }
 
        public void println(double num)
        {
            writer.println(num);
        }
 
        public void print(double num)
        {
            writer.print(num);
        }
 
        public void println(String s)
        {
            writer.println(s);
        }
 
        public void print(String s)
        {
            writer.print(s);
        }
 
        public void println()
        {
            writer.println();
        }
 
        public void printSpace()
        {
            writer.print(" ");
        }
 
        public void printf(String format, Object args)
        {
            writer.printf(format, args);
        }
 
        public void flush()
        {
            writer.flush();
        }
 
        public void close()
        {
            writer.close();
        }
 
    }
 
      static long MOD=1000000007;
               static long power(long a,long b){
                   if(b==0)
                       return 1;
                   else{
                       if(b%2==0)
                           return (power((a*a)%MOD,b/2))%MOD;
                       else
                           return (a*(power((a*a)%MOD,(b-1)/2))%MOD)%MOD;
                   }
               }
        static   long modInverse(long A)
          {
              return (power(A,MOD-2))%MOD;
          }
 
 
    public static void main(String args[]) throws Exception {
        Parser s = new Parser(System.in);
        OutputWriter out = new OutputWriter(System.out);
        int N=s.nextInt();
        long arr[]=new long[N];
        long dn=1l;
        for (int i = 0; i <N ; i++) {
            arr[i]=s.nextLong();
            dn=(dn*(arr[i]+1l))%MOD;
        }
        long modInver=modInverse(2);
        dn=(dn*modInver)%MOD;
        for (int i = 0; i <N ; i++) {
            arr[i]=(arr[i]*dn)%MOD;
        }
        long ans=1;
        for (int i = 0; i <N ; i++) {
            ans=(ans*(arr[i]+1l))%MOD;
        }
        System.out.println((ans+MOD)%MOD);
 
 
 
    }
}